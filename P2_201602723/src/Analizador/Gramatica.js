/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,10],$V2=[1,19],$V3=[1,11],$V4=[1,12],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[6,32,33,35,36,40,41,42,43,44],$Vb=[33,38],$Vc=[2,48],$Vd=[2,32,33,35,36,40,41,42,43,44],$Ve=[2,9,10,32,33,35,36,40,41,42,43,44],$Vf=[6,9,32,33,35,36,40,41,42,43,44,45,50,52,54,57,59,60,61,62,65,66,67],$Vg=[2,40],$Vh=[1,54],$Vi=[1,46],$Vj=[1,58],$Vk=[1,44],$Vl=[1,45],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[1,79],$VG=[1,80],$VH=[1,81],$VI=[6,9,10,32,33,35,36,38,40,41,42,43,44,45,47,50,52,54,57,58,59,60,61,62,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,122],$VN=[1,125],$VO=[10,47,52],$VP=[1,128],$VQ=[1,143],$VR=[1,141],$VS=[1,144],$VT=[1,145],$VU=[1,146],$VV=[1,147],$VW=[1,148],$VX=[1,149],$VY=[1,150],$VZ=[1,151],$V_=[10,47],$V$=[6,9,10,32,33,35,36,38,40,41,42,43,44,45,47,50,52,54,57,58,59,60,61,62,65,66,67,70,71,72,73,74,75],$V01=[6,9,10,32,33,35,36,38,40,41,42,43,44,45,47,50,52,54,57,58,59,60,61,62,65,66,67,70,71,72,73,74,75,76,77,78,79],$V11=[6,9,10,32,33,35,36,38,40,41,42,43,44,45,47,50,52,54,57,58,59,60,61,62,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81],$V21=[6,9,10,32,33,35,36,38,40,41,42,43,44,45,47,50,52,54,57,58,59,60,61,62,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],$V31=[6,9,10,32,33,35,36,38,40,41,42,43,44,45,47,50,52,54,57,58,59,60,61,62,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,95],$V41=[32,33,35,36,40,41,42,43,44,45,50,52,54,57,59,60,61,62,65,66,67],$V51=[1,170],$V61=[1,171],$V71=[1,172],$V81=[1,173],$V91=[9,32,33,35,36,40,41,42,43,44,45,47,50,52,54,57,59,60,61,62,65,66,67],$Va1=[1,223],$Vb1=[1,228],$Vc1=[1,229],$Vd1=[52,57,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"IMPORTACION":4,"INSTRUCCIONES":5,"EOF":6,"tk_import":7,"LISTA_ARCHIVO":8,"ptcoma":9,"coma":10,"nombre_archivo":11,"INSTRUCCION":12,"DECLARACION":13,"CREAR_FUNCION":14,"PROGRAMA":15,"PROGRAMA_SENTENCIA":16,"PRINT":17,"FUNCIONES_NATIVAS":18,"ASIGNACION":19,"AUMENTO":20,"SENTENCIA_IF":21,"SENTENCIA_SWITCH":22,"SENTENCIA_WHILE":23,"SENTENCIA_DOWHILE":24,"SENTENCIA_FOR":25,"SENTENCIA_TRANSFERENCIA":26,"CALL_FUNCION":27,"TIPOS":28,"LISTA_ID":29,"equal":30,"EXPRESION":31,"tk_var":32,"identificador":33,"equal2":34,"tk_const":35,"tk_global":36,"TIPO":37,"corizq":38,"corder":39,"tk_integer":40,"tk_double":41,"tk_char":42,"tk_boolean":43,"tk_void":44,"tk_print":45,"para":46,"parc":47,"incremento":48,"decremento":49,"tk_if":50,"llavea":51,"llavec":52,"tk_else":53,"tk_switch":54,"LIST_CASE":55,"SENTENCIA_CASE":56,"tk_case":57,"dospts":58,"tk_default":59,"tk_while":60,"tk_do":61,"tk_for":62,"INICIOFOR":63,"FINALFOR":64,"tk_break":65,"tk_continue":66,"tk_return":67,"LISTA_PARAMETROS":68,"LISTA_EXP":69,"xor":70,"op_or":71,"op_and":72,"igualacion":73,"diferencia":74,"igualdad_referencia":75,"mayor_igual":76,"menor_igual":77,"mayor":78,"menor":79,"mas":80,"menos":81,"por":82,"div":83,"modulo":84,"potencia":85,"not":86,"VALOR":87,"numero":88,"decimal":89,"caracter":90,"tk_true":91,"tk_false":92,"cadena":93,"VALOR_ARRAY":94,"punto":95,"FUNCION":96,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"tk_import",9:"ptcoma",10:"coma",11:"nombre_archivo",30:"equal",32:"tk_var",33:"identificador",34:"equal2",35:"tk_const",36:"tk_global",38:"corizq",39:"corder",40:"tk_integer",41:"tk_double",42:"tk_char",43:"tk_boolean",44:"tk_void",45:"tk_print",46:"para",47:"parc",48:"incremento",49:"decremento",50:"tk_if",51:"llavea",52:"llavec",53:"tk_else",54:"tk_switch",57:"tk_case",58:"dospts",59:"tk_default",60:"tk_while",61:"tk_do",62:"tk_for",65:"tk_break",66:"tk_continue",67:"tk_return",70:"xor",71:"op_or",72:"op_and",73:"igualacion",74:"diferencia",75:"igualdad_referencia",76:"mayor_igual",77:"menor_igual",78:"mayor",79:"menor",80:"mas",81:"menos",82:"por",83:"div",84:"modulo",85:"potencia",86:"not",88:"numero",89:"decimal",90:"caracter",91:"tk_true",92:"tk_false",93:"cadena",95:"punto"},
productions_: [0,[3,3],[3,2],[4,2],[4,3],[8,3],[8,1],[5,2],[5,1],[5,1],[12,1],[12,2],[12,1],[15,2],[15,1],[15,1],[16,1],[16,2],[16,1],[16,2],[16,1],[16,2],[16,1],[16,2],[16,1],[16,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[13,4],[13,4],[13,4],[13,4],[13,2],[29,3],[29,1],[28,1],[28,3],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[17,4],[19,3],[19,6],[20,2],[20,2],[21,7],[21,11],[21,9],[22,7],[55,2],[55,1],[56,4],[56,3],[23,7],[24,8],[25,11],[25,10],[25,10],[25,10],[25,9],[25,9],[25,9],[25,8],[63,1],[63,1],[64,1],[64,1],[26,1],[26,2],[26,1],[26,2],[26,2],[26,3],[14,7],[14,8],[68,4],[68,2],[27,3],[27,4],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,3],[31,4],[31,4],[31,4],[31,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,2],[87,2],[87,1],[87,1],[87,1],[94,3],[69,3],[69,1],[18,3],[18,3],[96,3],[96,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new Inicio.Inicio($$[$0-2],$$[$0-1]); 
break;
case 2:
 return $$[$0-1]; 
break;
case 3:
 this.$ = new Import.Import($$[$0],
														_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 4:
 this.$ = new Import.Import($$[$0-1],
        												_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 5: case 124:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 6: case 40: case 125:
 this.$ = []; this.$.push($$[$0]); 
break;
case 7: case 13:
 if($$[$0-1] instanceof Instruccion.Instruccion) $$[$0-1].listaInstrucciones.push($$[$0]); this.$ = $$[$0-1]; 
break;
case 8: case 14:
 this.$ = new Instruccion.Instruccion($$[$0],null); 
break;
case 9: case 15:
 console.log('Error Sintactico: "' + yytext + '", en la linea: '+ this._$.first_line + ', en la columna: ' + this._$.first_column);
				Informacion.Informacion.AddMessage('Error Sintactico: "' + yytext + '", en la linea: ' 
				+ this._$.first_line + ', en la columna: ' + this._$.first_column);
				Informacion.Informacion.lista_errores.push( 
				new Terror.Terror(yytext,this._$.first_line,this._$.first_column,'Sintactico','') );
				this.$ = new Error.Error(this._$.first_line,this._$.first_column);  
break;
case 10: case 16: case 18: case 20: case 22: case 24: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 43: case 44: case 45: case 46: case 47: case 48: case 110: case 121: case 122:
 this.$ = $$[$0]; 
break;
case 11: case 17: case 19: case 21: case 23: case 25: case 33: case 106: case 123:
 this.$ = $$[$0-1]; 
break;
case 12:
  Informacion.Informacion.AddMetodo($$[$0]); this.$ = $$[$0]; 
break;
case 34:
 this.$ = new Declaracion.Declaracion($$[$0-3],$$[$0-2],$$[$0],1,
																	_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 35:
 this.$ = new Declaracion2.Declaracion2($$[$0-2],$$[$0],2,
																	_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 36:
 this.$ = new Declaracion2.Declaracion2($$[$0-2],$$[$0],3,
																	_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 37:
 this.$ = new Declaracion2.Declaracion2($$[$0-2],$$[$0],4,
																	_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 38:
 this.$ = new Declaracion.Declaracion($$[$0-1],$$[$0],null,5,
																	_$[$0-1].first_line,_$[$0-1].first_column);  
break;
case 39:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 41:
 this.$ = new Tipo.Tipo($$[$0],false);  
break;
case 42:
 this.$ = new Tipo.Tipo($$[$0-2],true); 
break;
case 49:
 this.$ = new Print.Print($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 50:
 this.$ = new Asignacion.Asignacion($$[$0-2],$$[$0]
													,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 51:
  
break;
case 52: case 118:
 this.$ = new AumDecre.AumDecre($$[$0-1],true
													,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 53: case 119:
 this.$ = new AumDecre.AumDecre($$[$0-1],false
													,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 54:
 this.$ = new Sentencia_if.Sentencia_if($$[$0-4],$$[$0-1],null,1,
									_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 55:
 this.$ = new Sentencia_if.Sentencia_if($$[$0-8],$$[$0-5],$$[$0-1],2,
									_$[$0-10].first_line,_$[$0-10].first_column); 
break;
case 56:
 this.$ = new Sentencia_if.Sentencia_if($$[$0-6],$$[$0-3],$$[$0],3,
									_$[$0-8].first_line,_$[$0-8].first_column); 
break;
case 57:
 this.$ = new Sentencia_Switch.Sentencia_Switch($$[$0-4],$$[$0-1],
									_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 58:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 59:
 this.$=[]; this.$.push($$[$0]); 
break;
case 60:
 this.$= new Sentencia_Case.Sentencia_Case($$[$0-2],$$[$0],true,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 61:
 this.$= new Sentencia_Case.Sentencia_Case(null,$$[$0],false,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 62:
 this.$ = new Sentencia_While.Sentencia_While($$[$0-4],$$[$0-1]
									,_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 63:
 this.$ = new Sentencia_DoWhile.Sentencia_DoWhile($$[$0-1],$$[$0-5]
									,_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 64:
 this.$ = new Sentencia_For.Sentencia_For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]
									,_$[$0-10].first_line,_$[$0-10].first_column);  
break;
case 65:
 this.$ = new Sentencia_For.Sentencia_For(null,$$[$0-6],$$[$0-4],$$[$0-1]
									,_$[$0-9].first_line,_$[$0-9].first_column);  
break;
case 66:
 this.$ = new Sentencia_For.Sentencia_For($$[$0-7],null,$$[$0-4],$$[$0-1]
									,_$[$0-9].first_line,_$[$0-9].first_column);  
break;
case 67:
 this.$ = new Sentencia_For.Sentencia_For($$[$0-7],$$[$0-5],null,$$[$0-1]
									,_$[$0-9].first_line,_$[$0-9].first_column);  
break;
case 68:
 this.$ = new Sentencia_For.Sentencia_For(null,null,$$[$0-4],$$[$0-1]
									,_$[$0-8].first_line,_$[$0-8].first_column);  
break;
case 69:
 this.$ = new Sentencia_For.Sentencia_For($$[$0-6],null,null,$$[$0-1]
									,_$[$0-8].first_line,_$[$0-8].first_column);  
break;
case 70:
 this.$ = new Sentencia_For.Sentencia_For(null,$$[$0-5],null,$$[$0-1]
									,_$[$0-8].first_line,_$[$0-8].first_column);  
break;
case 71:
 this.$ = new Sentencia_For.Sentencia_For(null,null,null,$$[$0-1]
									,_$[$0-7].first_line,_$[$0-7].first_column);  
break;
case 72: case 73: case 74: case 75:
 this.$=$$[$0]; 
break;
case 76:
 this.$ = new Sentencia_Transferencia.Sentencia_Transferencia(1,null
									,_$[$0].first_line,_$[$0].first_column); 
break;
case 77:
 this.$ = new Sentencia_Transferencia.Sentencia_Transferencia(1,null
									,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 78:
 this.$ = new Sentencia_Transferencia.Sentencia_Transferencia(2,null
									,_$[$0].first_line,_$[$0].first_column); 
break;
case 79:
 this.$ = new Sentencia_Transferencia.Sentencia_Transferencia(2,null
									,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 80:
 this.$ = new Sentencia_Transferencia.Sentencia_Transferencia(3,null
									,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 81:
 this.$ = new Sentencia_Transferencia.Sentencia_Transferencia(4,$$[$0-1]
									,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 82:
 this.$ = new CrearFuncion.CrearFuncion($$[$0-6],$$[$0-5],null,$$[$0-1]
										,_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 83:
 this.$ = new CrearFuncion.CrearFuncion($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]
										,_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 84:
 $$[$0-3].push(new Parametro.Parametro($$[$0-1],$$[$0])); this.$ = $$[$0-3];  
break;
case 85:
 this.$ = []; this.$.push( new Parametro.Parametro($$[$0-1],$$[$0]) ); 
break;
case 86:
 this.$ = new LlamarFuncion.LlamarFuncion($$[$0-2],null
														,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 87:
 this.$ = new LlamarFuncion.LlamarFuncion($$[$0-3],$$[$0-1]
														,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 88:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.xor
													,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 89:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.op_or
													,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 90:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.op_and
													,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 91:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.igualacion
													,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 92:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.diferencia
													,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 93:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.igualdad_referencia
													,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 94:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.mayor_igual
													,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 95:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.menor_igual
													 ,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 96:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.mayor
													,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 97:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.menor
													,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 98:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.suma
											,_$[$0-2].first_line,_$[$0-2].first_column);  
break;
case 99:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.resta
											,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 100:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.multi
											,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 101:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.division
											,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 102:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.modulo
											,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 103:
 this.$ = new Exp.Exp($$[$0-2],$$[$0],Exp.Exp.OPERACION.potencia
											,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 104:
 this.$ = new Exp.Exp($$[$0],null,Exp.Exp.OPERACION.Umenos
											,_$[$0].first_line,_$[$0].first_column); 
break;
case 105:
 this.$ = new Exp.Exp($$[$0],null,Exp.Exp.OPERACION.not
											,_$[$0].first_line,_$[$0].first_column); 
break;
case 107:
 this.$ = new Explicit.Explicit($$[$0],1
												,_$[$0].first_line,_$[$0].first_column); 
break;
case 108:
 this.$ = new Explicit.Explicit($$[$0],2
												,_$[$0].first_line,_$[$0].first_column); 
break;
case 109:
 this.$ = new Explicit.Explicit($$[$0],3
												,_$[$0].first_line,_$[$0].first_column); 
break;
case 111:
 this.$ = new Valor.Valor($$[$0],auxExpresion.auxExpresion.COMBINACION_TIPOS.INTEGER
									,_$[$0].first_line,_$[$0].first_column); 
break;
case 112:
 this.$ = new Valor.Valor($$[$0],auxExpresion.auxExpresion.COMBINACION_TIPOS.DOUBLE
									,_$[$0].first_line,_$[$0].first_column); 
break;
case 113:
 this.$ = new Valor.Valor($$[$0].split('\'').join(''),
									 auxExpresion.auxExpresion.COMBINACION_TIPOS.CHAR,_$[$0].first_line,_$[$0].first_column); 
break;
case 114:
 this.$ = new Valor.Valor('1',auxExpresion.auxExpresion.COMBINACION_TIPOS.BOOL
									,_$[$0].first_line,_$[$0].first_column); 
break;
case 115:
 this.$ = new Valor.Valor('0',auxExpresion.auxExpresion.COMBINACION_TIPOS.BOOL
									,_$[$0].first_line,_$[$0].first_column); 
break;
case 116:
 this.$ = new Valor.Valor($$[$0],auxExpresion.auxExpresion.COMBINACION_TIPOS.STRING
									,_$[$0].first_line,_$[$0].first_column); 
break;
case 117:
 this.$ = new Valor.Valor($$[$0],auxExpresion.auxExpresion.COMBINACION_TIPOS.ID
									,_$[$0].first_line,_$[$0].first_column); 
break;
case 120:
 this.$ = new ListaArreglo.ListaArreglo($$[$0]); 
break;
case 126:
 this.$ = new FuncionNativa.FuncionNativa($$[$0-2],"",$$[$0],false
													,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 127:
 this.$ = new FuncionNativa.FuncionNativa(null,$$[$0-2],$$[$0],true
													,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 128:
 this.$ = new Funcion.Funcion($$[$0-2],null); 
break;
case 129:
 this.$ = new Funcion.Funcion($$[$0-3],$$[$0-1]); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:3,7:[1,4],12:5,13:7,14:8,28:9,32:$V1,33:$V2,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},{1:[3]},{2:$V0,5:20,12:5,13:7,14:8,28:9,32:$V1,33:$V2,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},{6:[1,21],12:22,13:7,14:8,28:9,32:$V1,33:$V2,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},{8:23,11:[1,24]},o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10],{9:[1,25]}),o($Va,[2,12]),{29:26,33:[1,27]},{33:[1,28]},{33:[1,29]},{33:[1,30]},{33:[2,41],38:[1,31]},o($Vb,[2,43]),o($Vb,[2,44]),o($Vb,[2,45]),o($Vb,[2,46]),o($Vb,[2,47]),o($Vb,$Vc),{6:[1,32],12:22,13:7,14:8,28:9,32:$V1,33:$V2,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},{1:[2,2]},o($Va,[2,7]),o($Vd,[2,3],{9:[1,33],10:[1,34]}),o($Ve,[2,6]),o($Va,[2,11]),o($Vf,[2,38],{10:[1,36],30:[1,35]}),o([6,9,10,30,32,33,35,36,40,41,42,43,44],$Vg,{46:[1,37]}),{34:[1,38]},{34:[1,39]},{34:[1,40]},{39:[1,41]},{1:[2,1]},o($Vd,[2,4]),{11:[1,42]},{18:57,27:56,31:43,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{33:[1,59]},{28:62,33:$V2,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,47:[1,60],68:61},{18:57,27:56,31:63,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:64,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:65,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{33:[2,42]},o($Ve,[2,5]),o($Vf,[2,34],{70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),{18:57,27:56,31:82,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:83,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:84,33:$Vh,40:[1,86],41:[1,85],42:[1,87],46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},o($VI,[2,110]),o($VI,[2,111]),o($VI,[2,112]),o($VI,[2,113]),o($VI,[2,114]),o($VI,[2,115]),o($VI,[2,116]),o($VI,[2,117],{46:$VJ,48:[1,88],49:[1,89],95:$VK}),o($VI,[2,120]),o($VI,[2,121]),o($VI,[2,122],{95:$VL}),{18:57,27:56,31:94,33:$Vh,46:$Vi,51:$Vj,69:93,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},o([6,9,10,30,32,33,35,36,40,41,42,43,44,45,50,52,54,57,59,60,61,62,65,66,67],[2,39]),{51:[1,95]},{10:[1,97],47:[1,96]},{33:[1,98]},o($Vf,[2,35],{70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o($Vf,[2,36],{70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o($Vf,[2,37],{70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),{18:57,27:56,31:99,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:100,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:101,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:102,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:103,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:104,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:105,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:106,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:107,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:108,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:109,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:110,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:111,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:112,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:113,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:114,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},o($VI,[2,104]),o($VI,[2,105]),{47:[1,115],70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH},{47:[1,116]},{47:[1,117]},{47:[1,118]},o($VI,[2,118]),o($VI,[2,119]),{18:57,27:56,31:94,33:$Vh,46:$Vi,47:[1,119],51:$Vj,69:120,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{33:$VM,96:121},{33:$VM,96:123},{10:$VN,52:[1,124]},o($VO,[2,125],{70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),{2:$VP,13:130,15:126,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{51:[1,152]},{28:153,33:$V2,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},o($V_,[2,85]),o([6,9,10,32,33,35,36,38,40,41,42,43,44,45,47,50,52,54,57,58,59,60,61,62,65,66,67,70],[2,88],{71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o([6,9,10,32,33,35,36,38,40,41,42,43,44,45,47,50,52,54,57,58,59,60,61,62,65,66,67,70,71],[2,89],{72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o([6,9,10,32,33,35,36,38,40,41,42,43,44,45,47,50,52,54,57,58,59,60,61,62,65,66,67,70,71,72],[2,90],{73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o($V$,[2,91],{76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o($V$,[2,92],{76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o($V$,[2,93],{76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o($V01,[2,94],{80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o($V01,[2,95],{80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o($V01,[2,96],{80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o($V01,[2,97],{80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o($V11,[2,98],{82:$VE,83:$VF,84:$VG,85:$VH}),o($V11,[2,99],{82:$VE,83:$VF,84:$VG,85:$VH}),o($V21,[2,100],{85:$VH}),o($V21,[2,101],{85:$VH}),o($V21,[2,102],{85:$VH}),o($VI,[2,103]),o($VI,[2,106]),{18:57,27:56,31:154,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:155,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:156,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},o($VI,[2,86]),{10:$VN,47:[1,157]},o($V31,[2,127]),{46:[1,158]},o($V31,[2,126]),o($VI,[2,123]),{18:57,27:56,31:159,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,160],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},o($V41,[2,14]),o($V41,[2,15]),o($V41,[2,16],{9:[1,162]}),o($V41,[2,18],{9:[1,163]}),o($V41,[2,20],{9:[1,164],95:$VL}),o($V41,[2,22],{9:[1,165]}),o($V41,[2,24],{9:[1,166]}),o($V41,[2,26]),o($V41,[2,27]),o($V41,[2,28]),o($V41,[2,29]),o($V41,[2,30]),o($V41,[2,31]),o($V41,[2,32],{9:[1,167]}),{46:[1,168]},{29:26,33:[1,169]},o($Vb,$Vc,{30:$V51,39:$V61,46:$VJ,48:$V71,49:$V81,95:$VK}),{46:[1,174]},{46:[1,175]},{46:[1,176]},{51:[1,177]},{46:[1,178]},o($V41,[2,76],{9:[1,179]}),o($V41,[2,78],{9:[1,180]}),{9:[1,181],18:57,27:56,31:182,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{2:$VP,13:130,15:183,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{33:[1,184]},o($VI,[2,107]),o($VI,[2,108]),o($VI,[2,109]),o($VI,[2,87]),{18:57,27:56,31:186,33:$Vh,46:$Vi,47:[1,185],51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},o($VO,[2,124],{70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),o($Va,[2,82]),o($V41,[2,13]),o($V41,[2,17]),o($V41,[2,19]),o($V41,[2,21]),o($V41,[2,23]),o($V41,[2,25]),o($V41,[2,33]),{18:57,27:56,31:187,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},o([9,10,30,32,33,35,36,40,41,42,43,44,45,50,52,54,57,59,60,61,62,65,66,67],$Vg),{18:57,27:56,31:188,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:189,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},o($V91,[2,52]),o($V91,[2,53]),{18:57,27:56,31:190,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:191,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{18:57,27:56,31:192,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{2:$VP,13:130,15:193,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{9:[1,195],13:196,19:197,28:142,32:$V1,33:[1,198],35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,63:194},o($V41,[2,77]),o($V41,[2,79]),o($V41,[2,80]),{9:[1,199],70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH},{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,200],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},o($V_,[2,84]),o($V31,[2,128]),{47:[1,201],70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH},{47:[1,202],70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH},o($V91,[2,50],{70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),{38:[1,203],70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH},{47:[1,204],70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH},{47:[1,205],70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH},{47:[1,206],70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH},{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,207],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{9:[1,208]},{9:[1,210],18:57,27:56,31:209,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{9:[2,72]},{9:[2,73]},o($Vb,$Vc,{30:$V51,39:$V61}),o($V41,[2,81]),o($Va,[2,83]),o($V31,[2,129]),o([9,32,33,35,36,40,41,42,43,44,45,50,52,54,57,59,60,61,62,65,66,67],[2,49]),{30:[1,211]},{51:[1,212]},{51:[1,213]},{51:[1,214]},{60:[1,215]},{9:[1,217],18:57,27:56,31:216,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{9:[1,218],70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH},{19:222,20:221,33:$Va1,47:[1,220],64:219},{18:57,27:56,31:224,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{2:$VP,13:130,15:225,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{55:226,56:227,57:$Vb1,59:$Vc1},{2:$VP,13:130,15:230,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{46:[1,231]},{9:[1,232],70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH},{19:222,20:221,33:$Va1,47:[1,234],64:233},{19:222,20:221,33:$Va1,47:[1,236],64:235},{47:[1,237]},{51:[1,238]},{47:[2,74]},{47:[2,75]},{30:$V51,39:$V61,48:$V71,49:$V81},o($V91,[2,51],{70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH}),{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,239],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{52:[1,240],56:241,57:$Vb1,59:$Vc1},o($Vd1,[2,59]),{18:57,27:56,31:242,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{58:[1,243]},{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,244],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{18:57,27:56,31:245,33:$Vh,46:$Vi,51:$Vj,81:$Vk,86:$Vl,87:47,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:55},{19:222,20:221,33:$Va1,47:[1,247],64:246},{47:[1,248]},{51:[1,249]},{47:[1,250]},{51:[1,251]},{51:[1,252]},{2:$VP,13:130,15:253,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},o($V41,[2,54],{53:[1,254]}),o($V41,[2,57]),o($Vd1,[2,58]),{58:[1,255],70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH},{2:$VP,13:130,15:256,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},o($V41,[2,62]),{47:[1,257],70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH},{47:[1,258]},{51:[1,259]},{51:[1,260]},{2:$VP,13:130,15:261,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{51:[1,262]},{2:$VP,13:130,15:263,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{2:$VP,13:130,15:264,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,265],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{21:267,50:$VS,51:[1,266]},{2:$VP,13:130,15:268,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},o($Vd1,[2,61],{37:13,17:129,13:130,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,16:161,32:$V1,33:$VQ,35:$V3,36:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ}),o($V41,[2,63]),{51:[1,269]},{2:$VP,13:130,15:270,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{2:$VP,13:130,15:271,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,272],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{2:$VP,13:130,15:273,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,274],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,275],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},o($V41,[2,71]),{2:$VP,13:130,15:276,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},o($V41,[2,56]),o($Vd1,[2,60],{37:13,17:129,13:130,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,16:161,32:$V1,33:$VQ,35:$V3,36:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ}),{2:$VP,13:130,15:277,16:127,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,278],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,279],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},o($V41,[2,69]),{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,280],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},o($V41,[2,70]),o($V41,[2,68]),{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,281],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},{13:130,16:161,17:129,18:131,19:132,20:133,21:134,22:135,23:136,24:137,25:138,26:139,27:140,28:142,32:$V1,33:$VQ,35:$V3,36:$V4,37:13,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$VR,50:$VS,52:[1,282],54:$VT,60:$VU,61:$VV,62:$VW,65:$VX,66:$VY,67:$VZ},o($V41,[2,67]),o($V41,[2,66]),o($V41,[2,65]),o($V41,[2,55]),o($V41,[2,64])],
defaultActions: {21:[2,2],32:[2,1],41:[2,42],196:[2,72],197:[2,73],221:[2,74],222:[2,75]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Terror = require('../Datos/Terror');
	const Informacion = require('../Datos/Informacion');
	const Valor = require('../Expresion/Valor');
	const Exp = require('../Expresion/Exp');
	const auxExpresion = require('../Expresion/auxExpresion');
	const Explicit = require('../Expresion/Casteo/Explicit');
	const Instruccion = require('../nodoArbol/Instruccion');
	const Error = require('../nodoArbol/Error');
	const Print = require('../FuncionesNativas/Print');
	const Declaracion = require('../Variables/Declaracion');
	const Declaracion2 = require('../Variables/Declaracion2');
	const Tipo = require('../Variables/Tipo');
	const AumDecre = require('../Variables/IncreUnario/AumDecre');
	const Asignacion = require('../Variables/Asignar/Asignacion');

	const Sentencia_if = require('../Sentencia_Control/Sentencia_if');
	const Sentencia_Case = require('../Sentencia_Control/Switch/Sentencia_Case');
	const Sentencia_Switch = require('../Sentencia_Control/Switch/Sentencia_Switch');
	const Sentencia_While = require('../Sentencia_Control/While/Sentencia_While');
	const Sentencia_DoWhile = require('../Sentencia_Control/DoWhile/Sentencia_DoWhile');
	const Sentencia_For = require('../Sentencia_Control/For/Sentencia_For');
	const Sentencia_Transferencia = require('../Sentencia_Control/Transferencia/Sentencia_Transferencia');

	const Parametro = require('../Funciones/Parametros/Parametro');
	const CrearFuncion = require('../Funciones/Creacion_Funcion/CrearFuncion');
	const LlamarFuncion = require('../Funciones/Llamar_Funcion/LlamarFuncion');

	const Import = require('../Importacion/Import');
	const Inicio = require('../Importacion/Inicio/Inicio');

	const FuncionNativa =require('../FuncionesNativas/FuncionNativa');
	const Funcion = require('../FuncionesNativas/Funcion');
	const ListaArreglo = require('../Arreglos/ListaArreglo');


 /* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylinemo":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:// comentario simple línea
break;
case 3:// comentario multiple líneas
break;
case 4:return 'REVALUAR';
break;
case 5:return 'tk_null';
break;
case 6:return 40;
break;
case 7:return 41;
break;
case 8:return 42;
break;
case 9:return 43;
break;
case 10:return 7;
break;
case 11:return 32;
break;
case 12:return 35;
break;
case 13:return 36;
break;
case 14:return 91;
break;
case 15:return 92;
break;
case 16:return 50;
break;
case 17:return 53;
break;
case 18:return 54;
break;
case 19:return 57;
break;
case 20:return 59;
break;
case 21:return 65;
break;
case 22:return 66;
break;
case 23:return 67;
break;
case 24:return 45;
break;
case 25:return 'tk_public';
break;
case 26:return 'tk_private';
break;
case 27:return 44;
break;
case 28:return 62;
break;
case 29:return 60;
break;
case 30:return 'tk_define';
break;
case 31:return 'tk_as';
break;
case 32:return 'tk_strc';
break;
case 33:return 61;
break;
case 34:return 'tk_try';
break;
case 35:return 'tk_catch';
break;
case 36:return 'tk_throw';
break;
case 37:return 9;
break;
case 38:return 46;
break;
case 39:return 47;
break;
case 40:return 38;
break;
case 41:return 39;
break;
case 42:return 51;
break;
case 43:return 52;
break;
case 44:return 34;
break;
case 45:return 58;
break;
case 46:return 10;
break;
case 47:return 95;
break;
case 48:return 48;
break;
case 49:return 49;
break;
case 50:return 80;
break;
case 51:return 81;
break;
case 52:return 82;
break;
case 53:return 83;
break;
case 54:return 85;
break;
case 55:return 84;
break;
case 56:return 77;
break;
case 57:return 76;
break;
case 58:return 79;
break;
case 59:return 78;
break;
case 60:return 72;
break;
case 61:return 71;
break;
case 62:return 75;
break;
case 63:return 73;
break;
case 64:return 30;
break;
case 65:return 74;
break;
case 66:return 86;
break;
case 67:return 70;
break;
case 68:return 89;
break;
case 69:return 88;
break;
case 70:return 90;
break;
case 71:return 11;
break;
case 72:return 33;
break;
case 73: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 93; 
break;
case 74:return 6;
break;
case 75: 	console.log('Error léxico: "' + yy_.yytext + '", en la linea: ' 
							+ yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
							Informacion.Informacion.AddMessage('Error léxico: "' + yy_.yytext + '", en la linea: ' 
							+ yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
							 Informacion.Informacion.lista_errores.push( 
								 new Terror.Terror(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column,'Lexico','') ); 
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:Evaluar\b)/,/^(?:null\b)/,/^(?:integer\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:import\b)/,/^(?:var\b)/,/^(?:const\b)/,/^(?:global\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:print\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:define\b)/,/^(?:as\b)/,/^(?:strc\b)/,/^(?:do\b)/,/^(?:try\b)/,/^(?:catch\b)/,/^(?:throw\b)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::=)/,/^(?::)/,/^(?:,)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:===)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:!)/,/^(?:\^)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:'[^\']')/,/^(?:[a-zA-Z][-_a-zA-Z0-9nÑ.]*[.]j\b)/,/^(?:[a-zA-Z_][_a-zA-Z0-9nÑ]*\b)/,/^(?:"[^\"]*")/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[],"inclusive":false},"comment":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}