/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica3D = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[12,13],$V1=[1,14],$V2=[1,34],$V3=[1,43],$V4=[1,42],$V5=[1,36],$V6=[1,37],$V7=[1,38],$V8=[1,39],$V9=[1,40],$Va=[1,41],$Vb=[9,14,15,18,49,51,52,55,58,59],$Vc=[1,69],$Vd=[1,68],$Ve=[1,66],$Vf=[1,67],$Vg=[9,14,15,18,49,51,52,55,57,58,59],$Vh=[1,87],$Vi=[1,88],$Vj=[1,89],$Vk=[1,90],$Vl=[1,91],$Vm=[1,92],$Vn=[12,17,37,38,39,40,41,43,44,45,46,47,48,54],$Vo=[14,20,36,37],$Vp=[14,15,18,49,51,52,57,58,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"DECLARAR_VARIABLES":4,"DECLARAR_STACK":5,"DECLARAR_HEAP":6,"DECLARAR_PUNTEROS":7,"INSTRUCCIONES":8,"EOF":9,"tk_var":10,"LISTA_ID":11,"ptcoma":12,"coma":13,"identificador":14,"tk_stack":15,"corizq":16,"corder":17,"tk_heap":18,"equal":19,"numero":20,"INSTRUCCION":21,"ASIGNACION":22,"DESTINO_SALTO":23,"SALTO_INCONDICIONAL":24,"SALTO_CONDICIONAL":25,"DECLARAR_METODO":26,"LLAMAR_METODO":27,"PRINT":28,"ASIGNAR_HEAP":29,"ASIGNAR_STACK":30,"PROGRAMA":31,"PROGRAMA_SENTENCIA":32,"VALOR":33,"OPERACION":34,"ASIGNAR_MEMORIA":35,"decimal":36,"menos":37,"mas":38,"por":39,"div":40,"modulo":41,"RELACIONAL":42,"menor_igual":43,"mayor_igual":44,"menor":45,"mayor":46,"igualacion":47,"diferencia":48,"etiqueta":49,"dospts":50,"tk_goto":51,"tk_if":52,"para":53,"parc":54,"tk_proc":55,"tk_begin":56,"tk_end":57,"tk_call":58,"tk_print":59,"pInt":60,"pDouble":61,"pChar":62,"$accept":0,"$end":1},
terminals_: {2:"error",9:"EOF",10:"tk_var",12:"ptcoma",13:"coma",14:"identificador",15:"tk_stack",16:"corizq",17:"corder",18:"tk_heap",19:"equal",20:"numero",36:"decimal",37:"menos",38:"mas",39:"por",40:"div",41:"modulo",43:"menor_igual",44:"mayor_igual",45:"menor",46:"mayor",47:"igualacion",48:"diferencia",49:"etiqueta",50:"dospts",51:"tk_goto",52:"tk_if",53:"para",54:"parc",55:"tk_proc",56:"tk_begin",57:"tk_end",58:"tk_call",59:"tk_print",60:"pInt",61:"pDouble",62:"pChar"},
productions_: [0,[3,7],[4,3],[11,3],[11,1],[5,5],[6,5],[7,5],[8,2],[8,1],[8,1],[21,1],[21,1],[21,2],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[31,2],[31,1],[31,1],[32,1],[32,1],[32,2],[32,2],[32,1],[32,1],[32,1],[32,1],[22,6],[22,4],[22,2],[35,6],[35,6],[33,1],[33,2],[33,1],[33,2],[33,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[30,7],[29,7],[23,2],[24,2],[25,8],[26,5],[27,3],[28,7],[28,7],[28,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new Cabecera.Cabecera($$[$0-6],$$[$0-1]); 
break;
case 2:
 this.$ = new Temporal.Temporal($$[$0-1]); 
break;
case 3:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 4:
 this.$ = []; this.$.push($$[$0]); 
break;
case 8: case 20:
 if($$[$0-1] instanceof Instruccion.Instruccion) $$[$0-1].listaInstrucciones.push($$[$0]); this.$ = $$[$0-1]; 
break;
case 9: case 21:
 this.$ = new Instruccion.Instruccion($$[$0]); 
break;
case 10: case 22:
 console.log('Error Sintactico: "' + yytext + '", en la linea: '+ this._$.first_line + ', en la columna: ' + this._$.first_column);
				Informacion.Informacion.AddMessage('Error Sintactico: "' + yytext + '", en la linea: ' 
				+ this._$.first_line + ', en la columna: ' + this._$.first_column);
				Informacion.Informacion.lista_errores.push( 
				new Terror.Terror(yytext,this._$.first_line,this._$.first_column,'Sintactico','') );
				this.$ = new Error.Error(this._$.first_line,this._$.first_column);  
break;
case 11: case 12: case 15: case 16: case 17: case 18: case 19: case 23: case 24: case 27: case 28: case 29: case 30: case 36: case 38: case 40: case 46:
 this.$ = $$[$0]; 
break;
case 13: case 14: case 25: case 26: case 33:
 this.$ = $$[$0-1]; 
break;
case 31:
 this.$ = new AsigOperacion.AsigOperacion($$[$0-5],$$[$0-3],$$[$0-2],$$[$0-1]
									,_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 32:
 this.$ = new Asignacion.Asignacion($$[$0-3],$$[$0-1]
									,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 34:
 this.$ = new DHeap_Stack.DHeap_Stack($$[$0-5],$$[$0-1],true
													,_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 35:
 this.$ = new DHeap_Stack.DHeap_Stack($$[$0-5],$$[$0-1],false
													,_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 37: case 39:
 this.$ = $$[$0-1]+$$[$0]; 
break;
case 41:
 this.$ = Exp.Exp.OPERACION.suma; 
break;
case 42:
 this.$ = Exp.Exp.OPERACION.resta; 
break;
case 43:
 this.$ = Exp.Exp.OPERACION.multi; 
break;
case 44:
 this.$ = Exp.Exp.OPERACION.division; 
break;
case 45:
 this.$ = Exp.Exp.OPERACION.modulo; 
break;
case 47:
 this.$ = Exp.Exp.OPERACION.menor_igual; 
break;
case 48:
 this.$ = Exp.Exp.OPERACION.mayor_igual; 
break;
case 49:
 this.$ = Exp.Exp.OPERACION.menor; 
break;
case 50:
 this.$ = Exp.Exp.OPERACION.mayor; 
break;
case 51:
 this.$ = Exp.Exp.OPERACION.igualacion; 
break;
case 52:
 this.$ = Exp.Exp.OPERACION.diferencia; 
break;
case 53:
 this.$ = new AHeap_Stack.AHeap_Stack($$[$0-4],$$[$0-1],true
									,_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 54:
 this.$ = new AHeap_Stack.AHeap_Stack($$[$0-4],$$[$0-1],false
									,_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 55:
 this.$ = new Etiqueta.Etiqueta($$[$0-1]
													,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 56:
 this.$ = new Goto.Goto($$[$0]
													,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 57:
 this.$ = new If.If($$[$0-5],$$[$0-3],$$[$0-4],$$[$0]
												,_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 58:
 this.$ = new Proc.Proc($$[$0-3],$$[$0-1]
												,_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 59:
 this.$ = new Call.Call($$[$0-1]
															,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 60:
 this.$ = new Print.Print($$[$0-2],1
															,_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 61:
 this.$ = new Print.Print($$[$0-2],2
															,_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 62:
 this.$ = new Print.Print($$[$0-2],3
															,_$[$0-6].first_line,_$[$0-6].first_column); 
break;
}
},
table: [{3:1,4:2,10:[1,3]},{1:[3]},{5:4,10:[1,5]},{11:6,14:[1,7]},{6:8,10:[1,9]},{15:[1,10]},{12:[1,11],13:[1,12]},o($V0,[2,4]),{7:13,10:$V1},{18:[1,15]},{16:[1,16]},{10:[2,2]},{14:[1,17]},{7:18,10:$V1},{14:[1,19]},{16:[1,20]},{17:[1,21]},o($V0,[2,3]),{2:[1,24],8:22,14:$V2,15:$V3,18:$V4,21:23,22:25,23:26,24:27,25:28,26:29,27:30,28:31,29:32,30:33,35:35,49:$V5,51:$V6,52:$V7,55:$V8,58:$V9,59:$Va},{19:[1,44]},{17:[1,45]},{12:[1,46]},{9:[1,47],14:$V2,15:$V3,18:$V4,21:48,22:25,23:26,24:27,25:28,26:29,27:30,28:31,29:32,30:33,35:35,49:$V5,51:$V6,52:$V7,55:$V8,58:$V9,59:$Va},o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),{12:[1,49]},{12:[1,50]},o($Vb,[2,15]),o($Vb,[2,16]),o($Vb,[2,17]),o($Vb,[2,18]),o($Vb,[2,19]),{19:[1,51]},{12:[1,52]},{50:[1,53]},{49:[1,54]},{53:[1,55]},{14:[1,56]},{14:[1,57]},{53:[1,58]},{16:[1,59]},{16:[1,60]},{20:[1,61]},{12:[1,62]},{10:[2,5]},{1:[2,1]},o($Vb,[2,8]),o($Vb,[2,13]),o($Vb,[2,14]),{14:$Vc,15:[1,64],18:[1,65],20:$Vd,33:63,36:$Ve,37:$Vf},o($Vg,[2,33]),o($Vg,[2,55]),{12:[2,56]},{14:$Vc,20:$Vd,33:70,36:$Ve,37:$Vf},{56:[1,71]},{12:[1,72]},{60:[1,73],61:[1,74],62:[1,75]},{14:$Vc,20:$Vd,33:76,36:$Ve,37:$Vf},{14:$Vc,20:$Vd,33:77,36:$Ve,37:$Vf},{12:[1,78]},{10:[2,6]},{12:[1,80],34:79,37:[1,82],38:[1,81],39:[1,83],40:[1,84],41:[1,85],42:86,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm},{16:[1,93]},{16:[1,94]},o($Vn,[2,36]),{20:[1,96],36:[1,95]},o($Vn,[2,38]),o($Vn,[2,40]),{42:97,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm},{2:[1,100],14:$V2,15:$V3,18:$V4,22:101,23:102,24:103,25:104,27:105,28:106,29:107,30:108,31:98,32:99,35:35,49:$V5,51:$V6,52:$V7,58:$V9,59:$Va},o($Vg,[2,59]),{13:[1,109]},{13:[1,110]},{13:[1,111]},{17:[1,112]},{17:[1,113]},o([2,10,14,15,18,49,51,52,55,58,59],[2,7]),{14:$Vc,20:$Vd,33:114,36:$Ve,37:$Vf},o($Vg,[2,32]),o($Vo,[2,41]),o($Vo,[2,42]),o($Vo,[2,43]),o($Vo,[2,44]),o($Vo,[2,45]),o($Vo,[2,46]),o($Vo,[2,47]),o($Vo,[2,48]),o($Vo,[2,49]),o($Vo,[2,50]),o($Vo,[2,51]),o($Vo,[2,52]),{14:$Vc,20:$Vd,33:115,36:$Ve,37:$Vf},{14:$Vc,20:$Vd,33:116,36:$Ve,37:$Vf},o($Vn,[2,37]),o($Vn,[2,39]),{14:$Vc,20:$Vd,33:117,36:$Ve,37:$Vf},{14:$V2,15:$V3,18:$V4,22:101,23:102,24:103,25:104,27:105,28:106,29:107,30:108,32:119,35:35,49:$V5,51:$V6,52:$V7,57:[1,118],58:$V9,59:$Va},o($Vp,[2,21]),o($Vp,[2,22]),o($Vp,[2,23]),o($Vp,[2,24]),{12:[1,120]},{12:[1,121]},o($Vp,[2,27]),o($Vp,[2,28]),o($Vp,[2,29]),o($Vp,[2,30]),{14:$Vc,20:$Vd,33:122,36:$Ve,37:$Vf},{14:$Vc,20:$Vd,33:123,36:$Ve,37:$Vf},{14:$Vc,20:$Vd,33:124,36:$Ve,37:$Vf},{19:[1,125]},{19:[1,126]},{12:[1,127]},{17:[1,128]},{17:[1,129]},{54:[1,130]},o($Vb,[2,58]),o($Vp,[2,20]),o($Vp,[2,25]),o($Vp,[2,26]),{54:[1,131]},{54:[1,132]},{54:[1,133]},{14:$Vc,20:$Vd,33:134,36:$Ve,37:$Vf},{14:$Vc,20:$Vd,33:135,36:$Ve,37:$Vf},o($Vg,[2,31]),{12:[2,34]},{12:[2,35]},{51:[1,136]},{12:[1,137]},{12:[1,138]},{12:[1,139]},{12:[1,140]},{12:[1,141]},{49:[1,142]},o($Vg,[2,60]),o($Vg,[2,61]),o($Vg,[2,62]),o($Vg,[2,54]),o($Vg,[2,53]),{12:[2,57]}],
defaultActions: {11:[2,2],46:[2,5],47:[2,1],54:[2,56],62:[2,6],128:[2,34],129:[2,35],142:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	/* const Valor = require('../Expresion/Valor');
	const Explicit = require('../Expresion/Casteo/Explicit');
	const Print = require('../FuncionesNativas/Print');
	const Declaracion = require('../Variables/Declaracion');
	const Declaracion2 = require('../Variables/Declaracion2');
	const Tipo = require('../Variables/Tipo');
	const AumDecre = require('../Variables/IncreUnario/AumDecre');
	const Asignacion = require('../Variables/Asignar/Asignacion');

	const Sentencia_if = require('../Sentencia_Control/Sentencia_if');
	const Sentencia_Case = require('../Sentencia_Control/Switch/Sentencia_Case');
	const Sentencia_Switch = require('../Sentencia_Control/Switch/Sentencia_Switch');
	const Sentencia_While = require('../Sentencia_Control/While/Sentencia_While');
	const Sentencia_DoWhile = require('../Sentencia_Control/DoWhile/Sentencia_DoWhile');
	const Sentencia_For = require('../Sentencia_Control/For/Sentencia_For');
	const Sentencia_Transferencia = require('../Sentencia_Control/Transferencia/Sentencia_Transferencia');

	const Parametro = require('../Funciones/Parametros/Parametro');
	const CrearFuncion = require('../Funciones/Creacion_Funcion/CrearFuncion');
	const LlamarFuncion = require('../Funciones/Llamar_Funcion/LlamarFuncion'); */
	const Informacion = require('../Datos/Informacion');
	const Exp = require('../Expresion/Exp');
	const Instruccion = require('../Codigo3D/Instrucciones/Instruccion');
	const Error = require('../nodoArbol/Error');
    const Terror = require('../Datos/Terror');
	const auxExpresion = require('../Expresion/auxExpresion');
    const Cabecera = require('../Codigo3D/Cabecera/Cabecera');
    const Temporal = require('../Codigo3D/Cabecera/Temporal');
    const AsigOperacion = require('../Codigo3D/Operacion/AsigOperacion');
	const Print = require('../Codigo3D/Print/Print');
	const Call = require('../Codigo3D/Call/Call');
	const Proc = require('../Codigo3D/Proc/Proc');
	const Etiqueta = require('../Codigo3D/Etiqueta/Etiqueta');
	const DHeap_Stack = require('../Codigo3D/Stack_Heap/DHeap_Stack');
	const AHeap_Stack = require('../Codigo3D/Stack_Heap/AHeap_Stack');
	const If = require('../Codigo3D/If/If');
	const Goto = require('../Codigo3D/Goto/Goto');
    const Asignacion= require('../Codigo3D/Operacion/Asignacion');

 /* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylinemo":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:// comentario simple línea
break;
case 3:// comentario multiple líneas
break;
case 4:return 10;
break;
case 5:return 15;
break;
case 6:return 18;
break;
case 7:return 51;
break;
case 8:return 56;
break;
case 9:return 57;
break;
case 10:return 58;
break;
case 11:return 52;
break;
case 12:return 59;
break;
case 13:return 55;
break;
case 14:return 12;
break;
case 15:return 53;
break;
case 16:return 54;
break;
case 17:return 16;
break;
case 18:return 17;
break;
case 19:return 50;
break;
case 20:return 13;
break;
case 21:return 38;
break;
case 22:return 37;
break;
case 23:return 39;
break;
case 24:return 40;
break;
case 25:return 60;
break;
case 26:return 61;
break;
case 27:return 62;
break;
case 28:return 41;
break;
case 29:return 43;
break;
case 30:return 44;
break;
case 31:return 48;
break;
case 32:return 45;
break;
case 33:return 46;
break;
case 34:return 47;
break;
case 35:return 19;
break;
case 36:return 49;
break;
case 37:return 36;
break;
case 38:return 20;
break;
case 39:return 14;
break;
case 40:return 9;
break;
case 41: 	console.log('Error léxico: "' + yy_.yytext + '", en la linea: ' 
							+ yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
							Informacion.Informacion.AddMessage('Error léxico: "' + yy_.yytext + '", en la linea: ' 
							+ yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
							 Informacion.Informacion.lista_errores.push( 
								 new Terror.Terror(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column,'Lexico','') ); 
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:#.*)/,/^(?:[#][*][^*]*[*]+([^#*][^*]*[*]+)*[#])/,/^(?:var\b)/,/^(?:stack\b)/,/^(?:heap\b)/,/^(?:goto\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:call\b)/,/^(?:if\b)/,/^(?:print\b)/,/^(?:proc\b)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:["]%i["])/,/^(?:["]%d["])/,/^(?:["]%c["])/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:=)/,/^(?:l[0-9]+)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:[a-zA-Z_][_a-zA-Z0-9nÑ]*\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[],"inclusive":false},"comment":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica3D;
exports.Parser = Gramatica3D.Parser;
exports.parse = function () { return Gramatica3D.parse.apply(Gramatica3D, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}